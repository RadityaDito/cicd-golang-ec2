name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Run CI/CD when code is pushed to main

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t radityaditoo/golang-echo-crud:latest .

      - name: Push Docker Image
        run: docker push radityaditoo/golang-echo-crud:latest

  deploy:
    name: Deploy to AWS EC2
    runs-on: self-hosted
    needs: build-and-push # Ensures deployment runs after the image is built

    steps:
      - name: Ensure Code is in /home/ubuntu/app
        run: |
          if [ ! -d "/home/ubuntu/app" ]; then
            sudo git clone https://github.com/RadityaDito/cicd-golang-ec2.git /home/ubuntu/app
          else
            cd /home/ubuntu/app
            sudo git pull origin main
          fi

      - name: Create .env File on EC2
        run: |
          cd /home/ubuntu/app
          sudo sh -c 'echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" > .env'
          sudo sh -c 'echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env'
          sudo sh -c 'echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env'
          sudo sh -c 'echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env'
          sudo sh -c 'echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env'
          sudo sh -c 'echo "DB_SSLMODE=${{ secrets.DB_SSLMODE }}" >> .env'

      - name: Pull latest Docker image
        run: |
          cd /home/ubuntu/app
          sudo docker-compose pull

      - name: Restart Services with Docker Compose
        run: |
          cd /home/ubuntu/app
          sudo docker-compose down || true
          sudo docker-compose up -d --build
